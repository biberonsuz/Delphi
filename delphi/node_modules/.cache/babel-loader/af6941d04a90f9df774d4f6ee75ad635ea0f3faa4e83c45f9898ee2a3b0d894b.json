{"ast":null,"code":"var _jsxFileName = \"/Users/pinarkazak/Repos/Delphi/delphi/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from 'react';\nimport Message from './Message';\nimport MessageInput from './MessageInput';\nimport LoadingAnimation from './icons/LoadingAnimation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  selectedBook,\n  chatId\n}) => {\n  _s();\n  const initMessage = `Hello, I am Delphi. Let's start reading ${selectedBook.title} by ${selectedBook.author}:`;\n  const [messages, setMessages] = useState([{\n    text: initMessage,\n    sender: 'bot'\n  }]);\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  useEffect(() => {\n    const fetchChatHistory = async () => {\n      if (!chatId) return;\n      const token = localStorage.getItem('token');\n      try {\n        const response = await fetch(`http://localhost:5000/api/chat-history?chatId=${chatId}`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setMessages(data.history);\n        } else {\n          console.error('Failed to fetch chat history');\n        }\n      } catch (error) {\n        console.error('Error fetching chat history:', error);\n      }\n    };\n    fetchChatHistory();\n  }, [chatId]);\n  const sendMessageToServer = async message => {\n    setIsLoading(true);\n    const token = localStorage.getItem('token');\n    let botReply = '';\n    try {\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          message,\n          chatId\n        })\n      });\n      if (response.body) {\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n        let done = false;\n        while (!done) {\n          const {\n            value,\n            done: readerDone\n          } = await reader.read();\n          done = readerDone;\n          if (value) {\n            const chunkText = decoder.decode(value);\n            botReply += chunkText;\n\n            // Update the bot's message incrementally\n            setMessages(prevMessages => [...prevMessages, {\n              text: chunkText,\n              sender: 'bot'\n            }]);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error streaming message from server:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        text: \"Sorry, I couldn't process your request.\",\n        sender: 'bot'\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n    return botReply;\n  };\n  const addMessage = async message => {\n    setMessages([...messages, {\n      text: message,\n      sender: 'user'\n    }]);\n    await sendMessageToServer(message);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col grow h-dvh mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-y-auto bg-gray-10 p-4\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        text: msg.text,\n        sender: msg.sender\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center\",\n        children: /*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      onSend: addMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"nfZlJr1eWFz+XzZmbRoUmQYuie4=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useState","useRef","useEffect","Message","MessageInput","LoadingAnimation","jsxDEV","_jsxDEV","Chat","selectedBook","chatId","_s","initMessage","title","author","messages","setMessages","text","sender","isLoading","setIsLoading","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","fetchChatHistory","token","localStorage","getItem","response","fetch","method","headers","ok","data","json","history","console","error","sendMessageToServer","message","botReply","body","JSON","stringify","reader","getReader","decoder","TextDecoder","done","value","readerDone","read","chunkText","decode","prevMessages","addMessage","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSend","_c","$RefreshReg$"],"sources":["/Users/pinarkazak/Repos/Delphi/delphi/src/components/Chat.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react'\nimport Message from './Message'\nimport MessageInput from './MessageInput'\nimport LoadingAnimation from './icons/LoadingAnimation'\n\nconst Chat = ({ selectedBook, chatId }) => {\n  const initMessage = `Hello, I am Delphi. Let's start reading ${selectedBook.title} by ${selectedBook.author}:`\n  \n  const [messages, setMessages] = useState([{ text: initMessage, sender: 'bot' }])\n  const [isLoading, setIsLoading] = useState(false)\n  const messagesEndRef = useRef(null)\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [messages])\n\n  useEffect(() => {\n    const fetchChatHistory = async () => {\n      if (!chatId) return\n\n      const token = localStorage.getItem('token')\n      try {\n        const response = await fetch(`http://localhost:5000/api/chat-history?chatId=${chatId}`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        })\n\n        if (response.ok) {\n          const data = await response.json()\n          setMessages(data.history)\n        } else {\n          console.error('Failed to fetch chat history')\n        }\n      } catch (error) {\n        console.error('Error fetching chat history:', error)\n      }\n    }\n\n    fetchChatHistory()\n  }, [chatId])\n\n  const sendMessageToServer = async (message) => {\n    setIsLoading(true)\n    const token = localStorage.getItem('token')\n    let botReply = ''\n\n    try {\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({ message, chatId }),\n      })\n\n      if (response.body) {\n        const reader = response.body.getReader()\n        const decoder = new TextDecoder()\n        let done = false\n\n        while (!done) {\n          const { value, done: readerDone } = await reader.read()\n          done = readerDone\n          if (value) {\n            const chunkText = decoder.decode(value)\n            botReply += chunkText\n\n            // Update the bot's message incrementally\n            setMessages((prevMessages) => [\n              ...prevMessages,\n              { text: chunkText, sender: 'bot' }\n            ])\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error streaming message from server:', error)\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { text: \"Sorry, I couldn't process your request.\", sender: 'bot' }\n      ])\n    } finally {\n      setIsLoading(false)\n    }\n\n    return botReply\n  }\n\n  const addMessage = async (message) => {\n    setMessages([...messages, { text: message, sender: 'user' }])\n    await sendMessageToServer(message)\n  }\n\n  return (\n    <div className=\"flex flex-col grow h-dvh mx-auto\">\n      <div className=\"flex-1 overflow-y-auto bg-gray-10 p-4\">\n        {messages.map((msg, index) => (\n          <Message key={index} text={msg.text} sender={msg.sender} />\n        ))}\n        {isLoading && (\n          <div className=\"flex items-center\">\n            <LoadingAnimation />\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      <MessageInput onSend={addMessage} />\n    </div>\n  )\n}\n\nexport default Chat\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}