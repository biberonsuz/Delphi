{"ast":null,"code":"var _jsxFileName = \"/Users/pinarkazak/Repos/Delphi/delphi/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from 'react';\nimport Message from './Message';\nimport MessageInput from './MessageInput';\nimport LoadingAnimation from './icons/LoadingAnimation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  selectedBook,\n  chatId\n}) => {\n  _s();\n  const initMessage = `Hello, I am Delphi. Let's start reading ${selectedBook.title} by ${selectedBook.author}:`;\n  const [messages, setMessages] = useState([{\n    text: initMessage,\n    sender: 'bot'\n  }]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentBotMessage, setCurrentBotMessage] = useState('');\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, currentBotMessage]);\n  useEffect(() => {\n    const fetchChatHistory = async () => {\n      if (!chatId) return;\n      const token = localStorage.getItem('token');\n      try {\n        const response = await fetch(`http://localhost:5000/api/chat-history?chatId=${chatId}`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setMessages(data.history);\n        } else {\n          console.error('Failed to fetch chat history');\n        }\n      } catch (error) {\n        console.error('Error fetching chat history:', error);\n      }\n    };\n    fetchChatHistory();\n  }, [chatId]);\n  const streamMessageToServer = message => {\n    setIsLoading(true);\n    const token = localStorage.getItem('token');\n    const eventSource = new EventSource(`http://localhost:5000/api/chat?chatId=${chatId}&message=${encodeURIComponent(message)}`);\n    eventSource.onmessage = event => {\n      if (event.data === '[DONE]') {\n        setMessages(prevMessages => [...prevMessages, {\n          text: currentBotMessage,\n          sender: 'bot'\n        }]);\n        setCurrentBotMessage('');\n        setIsLoading(false);\n        eventSource.close();\n      } else {\n        setCurrentBotMessage(prev => prev + event.data);\n      }\n    };\n    eventSource.onerror = error => {\n      console.error('Error with SSE connection:', error);\n      setIsLoading(false);\n      eventSource.close();\n    };\n  };\n  const addMessage = message => {\n    setMessages([...messages, {\n      text: message,\n      sender: 'user'\n    }]);\n    setCurrentBotMessage(''); // Reset bot message display\n    streamMessageToServer(message);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col grow h-dvh mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-y-auto bg-gray-10 p-4\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        text: msg.text,\n        sender: msg.sender\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)), currentBotMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot\",\n        children: /*#__PURE__*/_jsxDEV(Message, {\n          text: currentBotMessage,\n          sender: \"bot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center\",\n        children: /*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      onSend: addMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"KjMNkje639PWi7AspGP6zxSxp7Q=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useState","useRef","useEffect","Message","MessageInput","LoadingAnimation","jsxDEV","_jsxDEV","Chat","selectedBook","chatId","_s","initMessage","title","author","messages","setMessages","text","sender","isLoading","setIsLoading","currentBotMessage","setCurrentBotMessage","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","fetchChatHistory","token","localStorage","getItem","response","fetch","method","headers","ok","data","json","history","console","error","streamMessageToServer","message","eventSource","EventSource","encodeURIComponent","onmessage","event","prevMessages","close","prev","onerror","addMessage","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSend","_c","$RefreshReg$"],"sources":["/Users/pinarkazak/Repos/Delphi/delphi/src/components/Chat.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react'\nimport Message from './Message'\nimport MessageInput from './MessageInput'\nimport LoadingAnimation from './icons/LoadingAnimation'\n\nconst Chat = ({ selectedBook, chatId }) => {\n  const initMessage = `Hello, I am Delphi. Let's start reading ${selectedBook.title} by ${selectedBook.author}:`\n\n  const [messages, setMessages] = useState([{ text: initMessage, sender: 'bot' }])\n  const [isLoading, setIsLoading] = useState(false)\n  const [currentBotMessage, setCurrentBotMessage] = useState('')\n  const messagesEndRef = useRef(null)\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [messages, currentBotMessage])\n\n  useEffect(() => {\n    const fetchChatHistory = async () => {\n      if (!chatId) return\n\n      const token = localStorage.getItem('token')\n      try {\n        const response = await fetch(`http://localhost:5000/api/chat-history?chatId=${chatId}`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        })\n\n        if (response.ok) {\n          const data = await response.json()\n          setMessages(data.history)\n        } else {\n          console.error('Failed to fetch chat history')\n        }\n      } catch (error) {\n        console.error('Error fetching chat history:', error)\n      }\n    }\n\n    fetchChatHistory()\n  }, [chatId])\n\n  const streamMessageToServer = (message) => {\n    setIsLoading(true)\n    const token = localStorage.getItem('token')\n    const eventSource = new EventSource(`http://localhost:5000/api/chat?chatId=${chatId}&message=${encodeURIComponent(message)}`)\n\n    eventSource.onmessage = (event) => {\n      if (event.data === '[DONE]') {\n        setMessages((prevMessages) => [\n          ...prevMessages,\n          { text: currentBotMessage, sender: 'bot' }\n        ])\n        setCurrentBotMessage('')\n        setIsLoading(false)\n        eventSource.close()\n      } else {\n        setCurrentBotMessage((prev) => prev + event.data)\n      }\n    }\n\n    eventSource.onerror = (error) => {\n      console.error('Error with SSE connection:', error)\n      setIsLoading(false)\n      eventSource.close()\n    }\n  }\n\n  const addMessage = (message) => {\n    setMessages([...messages, { text: message, sender: 'user' }])\n    setCurrentBotMessage('') // Reset bot message display\n    streamMessageToServer(message)\n  }\n\n  return (\n    <div className=\"flex flex-col grow h-dvh mx-auto\">\n      <div className=\"flex-1 overflow-y-auto bg-gray-10 p-4\">\n        {messages.map((msg, index) => (\n          <Message key={index} text={msg.text} sender={msg.sender} />\n        ))}\n        {currentBotMessage && (\n          <div className=\"message bot\">\n            <Message text={currentBotMessage} sender=\"bot\" />\n          </div>\n        )}\n        {isLoading && (\n          <div className=\"flex items-center\">\n            <LoadingAnimation />\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      <MessageInput onSend={addMessage} />\n    </div>\n  )\n}\n\nexport default Chat\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}