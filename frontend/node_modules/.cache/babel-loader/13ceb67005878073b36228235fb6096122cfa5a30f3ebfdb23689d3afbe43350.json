{"ast":null,"code":"var _jsxFileName = \"/Users/pinarkazak/Repos/Delphi/delphi/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport BookIcon from './icons/BookIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  books,\n  onSelectChat,\n  onSelectBook\n}) => {\n  _s();\n  const [chats, setChats] = useState([]);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [chatsFetched, setChatsFetched] = useState(false); // New state to track fetching completion\n\n  const categories = Array.from(new Set(books.map(book => book.category)));\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    setIsLoggedIn(!!token);\n    if (token) fetchUserChats(token);\n  }, []);\n  const fetchUserChats = async token => {\n    try {\n      const response = await fetch('http://localhost:5000/api/user-chats', {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(data);\n        setChats(data.chats);\n      } else {\n        console.error('Failed to fetch chats');\n      }\n    } catch (error) {\n      console.error('Error fetching chats:', error);\n    } finally {\n      setChatsFetched(true); // Mark fetching as complete\n    }\n  };\n  const handleChatSelection = async chatId => {\n    if (!chatsFetched) return; // Ensure chats are fetched first\n\n    if (chatId) {\n      onSelectChat(chatId);\n    } else {\n      const createdChatId = await createChat();\n      onSelectChat(createdChatId);\n    }\n  };\n  const createChat = async () => {\n    const token = localStorage.getItem('token');\n    const selectedBook = books.find(book => book.available); // Replace with your book selection logic\n\n    if (token && selectedBook) {\n      try {\n        const response = await fetch('http://localhost:5000/api/create-chat', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            selectedBook\n          })\n        });\n        const data = await response.json();\n        return data.chatId;\n      } catch (error) {\n        console.error('Error creating chat:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 pt-24 text-center grow overflow-y-scroll\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col items-center space-y-12\",\n      children: chats.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full min-h-60 h-60 rounded-xl flex flex-col\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-left text-2xl mb-4 font-medium\",\n          children: \"Jump back in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"overflow-x-scroll gap-8 w-full flex grow\",\n          children: chats.map(chat => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"w-24 h-full max-w-96 mr-0 flex-grow bg-gray-100 rounded-lg hover:bg-indigo-50 hover:cursor-pointer\",\n            onClick: () => handleChatSelection(chat.chatId) // Use the new handler\n            ,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"py-1 px-1 rounded-3xl flex w-min\",\n              children: /*#__PURE__*/_jsxDEV(BookIcon, {\n                size: 24,\n                strokeWidth: 1.5\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"font-medium\",\n              children: chat.book.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"\",\n              children: chat.book.author\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 37\n            }, this)]\n          }, chat.chatId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"ToVN0odTU2Hz7MQBInwVWLyOYB8=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","useEffect","BookIcon","jsxDEV","_jsxDEV","Dashboard","books","onSelectChat","onSelectBook","_s","chats","setChats","isLoggedIn","setIsLoggedIn","chatsFetched","setChatsFetched","categories","Array","from","Set","map","book","category","token","localStorage","getItem","fetchUserChats","response","fetch","method","headers","Authorization","ok","data","json","console","log","error","handleChatSelection","chatId","createdChatId","createChat","selectedBook","find","available","body","JSON","stringify","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","chat","onClick","size","strokeWidth","title","author","_c","$RefreshReg$"],"sources":["/Users/pinarkazak/Repos/Delphi/delphi/src/components/Chat.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport BookIcon from './icons/BookIcon'\n\nconst Dashboard = ({ books, onSelectChat, onSelectBook }) => {\n    const [chats, setChats] = useState([])\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\n    const [chatsFetched, setChatsFetched] = useState(false) // New state to track fetching completion\n\n    const categories = Array.from(new Set(books.map(book => book.category)))\n\n    useEffect(() => {\n        const token = localStorage.getItem('token')\n        setIsLoggedIn(!!token)\n        if (token) fetchUserChats(token)\n    }, [])\n\n    const fetchUserChats = async (token) => {\n        try {\n            const response = await fetch('http://localhost:5000/api/user-chats', {\n                method: 'GET',\n                headers: { Authorization: `Bearer ${token}` }\n            })\n            if (response.ok) {\n                const data = await response.json()\n                console.log(data)\n                setChats(data.chats)\n            } else {\n                console.error('Failed to fetch chats')\n            }\n        } catch (error) {\n            console.error('Error fetching chats:', error)\n        } finally {\n            setChatsFetched(true) // Mark fetching as complete\n        }\n    }\n\n    const handleChatSelection = async (chatId) => {\n        if (!chatsFetched) return // Ensure chats are fetched first\n\n        if (chatId) {\n            onSelectChat(chatId)\n        } else {\n            const createdChatId = await createChat()\n            onSelectChat(createdChatId)\n        }\n    }\n\n    const createChat = async () => {\n        const token = localStorage.getItem('token')\n        const selectedBook = books.find(book => book.available) // Replace with your book selection logic\n\n        if (token && selectedBook) {\n            try {\n                const response = await fetch('http://localhost:5000/api/create-chat', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${token}`\n                    },\n                    body: JSON.stringify({ selectedBook })\n                })\n                const data = await response.json()\n                return data.chatId\n            } catch (error) {\n                console.error('Error creating chat:', error)\n            }\n        }\n    }\n\n    return (\n        <div className=\"p-6 pt-24 text-center grow overflow-y-scroll\">\n            <div className=\"flex flex-col items-center space-y-12\">\n                {chats.length ? (\n                    <div className=\"w-full min-h-60 h-60 rounded-xl flex flex-col\">\n                        <h2 className=\"text-left text-2xl mb-4 font-medium\">Jump back in</h2>\n                        <ul className=\"overflow-x-scroll gap-8 w-full flex grow\">\n                            {chats.map((chat) => (\n                                <li\n                                    key={chat.chatId}\n                                    className=\"w-24 h-full max-w-96 mr-0 flex-grow bg-gray-100 rounded-lg hover:bg-indigo-50 hover:cursor-pointer\"\n                                    onClick={() => handleChatSelection(chat.chatId)} // Use the new handler\n                                >\n                                    <span className=\"py-1 px-1 rounded-3xl flex w-min\">\n                                        <BookIcon size={24} strokeWidth={1.5} />\n                                    </span>\n                                    <h1 className=\"font-medium\">{chat.book.title}</h1>\n                                    <h2 className=\"\">{chat.book.author}</h2>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                ) : null}\n            </div>\n        </div>\n    )\n}\n\nexport default Dashboard\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}