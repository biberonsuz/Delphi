{"ast":null,"code":"var _jsxFileName = \"/Users/pinarkazak/Repos/Delphi/delphi/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from 'react';\nimport Message from './Message';\nimport MessageInput from './MessageInput';\nimport LoadingAnimation from './icons/LoadingAnimation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  selectedBook,\n  chatId: initialChatId\n}) => {\n  _s();\n  const initMessage = `Hi, I am Delphi. What would you like to know about ${selectedBook.title} by ${selectedBook.author}?`;\n  const [messages, setMessages] = useState([{\n    text: initMessage,\n    sender: 'bot'\n  }]);\n  const [chatId, setChatId] = useState(initialChatId); // Set initial chatId from prop\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  useEffect(() => {\n    const fetchChatHistory = async () => {\n      if (!chatId) return; // Only fetch if chatId exists\n\n      const token = localStorage.getItem('token');\n      try {\n        const response = await fetch(`http://localhost:5000/api/chat-history?chatId=${chatId}`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          console.log(data);\n          setMessages(data.history);\n        } else {\n          console.error('Failed to fetch chat history');\n        }\n      } catch (error) {\n        console.error('Error fetching chat history:', error);\n      }\n    };\n    fetchChatHistory();\n  }, [chatId]); // Re-fetch if chatId changes\n\n  const sendMessageToServer = async message => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          message,\n          chatId\n        })\n      });\n      const data = await response.json();\n      if (!chatId && data.chatId) {\n        setChatId(data.chatId); // Save the new chatId if a new session was created\n      }\n      return data.reply;\n    } catch (error) {\n      console.error('Error sending message to server:', error);\n      return \"Sorry, I couldn't process your request.\";\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const addMessage = async message => {\n    setMessages([...messages, {\n      text: message,\n      sender: 'user'\n    }]);\n    const botReply = await sendMessageToServer(message);\n    setMessages(prevMessages => [...prevMessages, {\n      text: botReply,\n      sender: 'bot'\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col grow h-dvh mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-y-auto bg-gray-10 p-4\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        text: msg.text,\n        sender: msg.sender\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center\",\n        children: /*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      onSend: addMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"/psT/Qe5eYYorvDFupFuRXb0nRc=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useState","useRef","useEffect","Message","MessageInput","LoadingAnimation","jsxDEV","_jsxDEV","Chat","selectedBook","chatId","initialChatId","_s","initMessage","title","author","messages","setMessages","text","sender","setChatId","isLoading","setIsLoading","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","fetchChatHistory","token","localStorage","getItem","response","fetch","method","headers","ok","data","json","console","log","history","error","sendMessageToServer","message","body","JSON","stringify","reply","addMessage","botReply","prevMessages","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSend","_c","$RefreshReg$"],"sources":["/Users/pinarkazak/Repos/Delphi/delphi/src/components/Chat.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react'\nimport Message from './Message'\nimport MessageInput from './MessageInput'\nimport LoadingAnimation from './icons/LoadingAnimation'\n\nconst Chat = ({ selectedBook, chatId: initialChatId }) => {\n  const initMessage = `Hi, I am Delphi. What would you like to know about ${selectedBook.title} by ${selectedBook.author}?`\n  \n  const [messages, setMessages] = useState([{ text: initMessage, sender: 'bot' }])\n  const [chatId, setChatId] = useState(initialChatId) // Set initial chatId from prop\n  const [isLoading, setIsLoading] = useState(false)\n  const messagesEndRef = useRef(null)\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [messages])\n\n  useEffect(() => {\n    const fetchChatHistory = async () => {\n      if (!chatId) return // Only fetch if chatId exists\n\n      const token = localStorage.getItem('token')\n      try {\n        const response = await fetch(`http://localhost:5000/api/chat-history?chatId=${chatId}`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        })\n\n        if (response.ok) {\n          const data = await response.json()\n          console.log(data)\n          setMessages(data.history)\n        } else {\n          console.error('Failed to fetch chat history')\n        }\n      } catch (error) {\n        console.error('Error fetching chat history:', error)\n      }\n    }\n\n    fetchChatHistory()\n  }, [chatId]) // Re-fetch if chatId changes\n\n  const sendMessageToServer = async (message) => {\n    setIsLoading(true)\n    try {\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({ message, chatId }),\n      })\n\n      const data = await response.json()\n      if (!chatId && data.chatId) {\n        setChatId(data.chatId) // Save the new chatId if a new session was created\n      }\n      return data.reply\n    } catch (error) {\n      console.error('Error sending message to server:', error)\n      return \"Sorry, I couldn't process your request.\"\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const addMessage = async (message) => {\n    setMessages([...messages, { text: message, sender: 'user' }])\n\n    const botReply = await sendMessageToServer(message)\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { text: botReply, sender: 'bot' },\n    ])\n  }\n\n  return (\n    <div className=\"flex flex-col grow h-dvh mx-auto\">\n      <div className=\"flex-1 overflow-y-auto bg-gray-10 p-4\">\n        {messages.map((msg, index) => (\n          <Message key={index} text={msg.text} sender={msg.sender} />\n        ))}\n        {isLoading && (\n          <div className=\"flex items-center\">\n            <LoadingAnimation />\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      <MessageInput onSend={addMessage} />\n    </div>\n  )\n}\n\nexport default Chat\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}