{"ast":null,"code":"var _jsxFileName = \"/Users/pinarkazak/Repos/Delphi/delphi/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from 'react';\nimport Message from './Message';\nimport MessageInput from './MessageInput';\nimport LoadingAnimation from './icons/LoadingAnimation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  selectedBook\n}) => {\n  _s();\n  const initMessage = `Hi, I am Delphi. What would you like to know about ${selectedBook.title} by ${selectedBook.author}?`;\n  const [messages, setMessages] = useState([{\n    text: initMessage,\n    sender: 'bot'\n  }]);\n  const messagesEndRef = useRef(null);\n  const [chatId, setChatId] = useState(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const [isLoading, setIsLoading] = useState(false);\n  const sendMessageToServer = async message => {\n    setIsLoading(true);\n    console.log(message, chatId);\n    try {\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message,\n          chatId\n        })\n      });\n      const data = await response.json();\n      if (!chatId && data.chatId) {\n        setChatId(data.chatId);\n      }\n      return data.reply;\n    } catch (error) {\n      console.error('Error sending message to server:', error);\n      return \"Sorry, I couldn't process your request.\";\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const addMessage = async message => {\n    setMessages([...messages, {\n      text: message,\n      sender: 'user'\n    }]);\n    const botReply = await sendMessageToServer(message);\n    setMessages(prevMessages => [...prevMessages, {\n      text: botReply,\n      sender: 'bot'\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col grow h-dvh mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-y-auto bg-gray-10 p-4\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        text: msg.text,\n        sender: msg.sender\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center\",\n        children: /*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      onSend: addMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"qn3gxBOhQD52aMlu5PKMgET58oU=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useState","useRef","useEffect","Message","MessageInput","LoadingAnimation","jsxDEV","_jsxDEV","Chat","selectedBook","_s","initMessage","title","author","messages","setMessages","text","sender","messagesEndRef","chatId","setChatId","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","isLoading","setIsLoading","sendMessageToServer","message","console","log","response","fetch","method","headers","body","JSON","stringify","data","json","reply","error","addMessage","botReply","prevMessages","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSend","_c","$RefreshReg$"],"sources":["/Users/pinarkazak/Repos/Delphi/delphi/src/components/Chat.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react'\nimport Message from './Message'\nimport MessageInput from './MessageInput'\nimport LoadingAnimation from './icons/LoadingAnimation'\n\nconst Chat = ({ selectedBook }) => {\n  const initMessage = `Hi, I am Delphi. What would you like to know about ${selectedBook.title} by ${selectedBook.author}?`\n\n  const [messages, setMessages] = useState([{ text: initMessage, sender: 'bot' }])\n  const messagesEndRef = useRef(null)\n  const [chatId, setChatId] = useState(null)\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }\n  useEffect(() => {\n    scrollToBottom()\n  }, [messages])\n  const [isLoading, setIsLoading] = useState(false)\n\n  const sendMessageToServer = async (message) => {\n    setIsLoading(true)\n    console.log(message, chatId)\n    try {\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message, chatId }),\n      })\n\n      const data = await response.json()\n      if (!chatId && data.chatId) {\n        setChatId(data.chatId)\n      }\n      return data.reply\n    } catch (error) {\n      console.error('Error sending message to server:', error)\n      return \"Sorry, I couldn't process your request.\"\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const addMessage = async (message) => {\n    setMessages([...messages, { text: message, sender: 'user' }])\n\n    const botReply = await sendMessageToServer(message)\n\n    setMessages((prevMessages) => [\n      ...prevMessages,\n      { text: botReply, sender: 'bot' },\n    ])\n  }\n\n  return (\n    <div className=\"flex flex-col grow h-dvh mx-auto\">\n      <div className=\"flex-1 overflow-y-auto bg-gray-10 p-4\">\n        {messages.map((msg, index) => (\n          <Message key={index} text={msg.text} sender={msg.sender} />\n        ))}\n        {isLoading && (\n          <div className=\"flex items-center\">\n            <LoadingAnimation />\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      <MessageInput onSend={addMessage} />\n    </div>\n  )\n}\n\nexport default Chat\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}