{"ast":null,"code":"var _jsxFileName = \"/Users/pinarkazak/Repos/Delphi/delphi/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from 'react';\nimport Message from './Message';\nimport MessageInput from './MessageInput';\nimport LoadingAnimation from './icons/LoadingAnimation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  selectedBook,\n  chatId\n}) => {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: ``,\n    sender: 'bot'\n  }]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const [lastParagraphs, setLastParagraphs] = useState([]);\n  const isStreamingRef = useRef(false);\n  useEffect(() => {\n    const fetchBookStream = async () => {\n      if (isStreamingRef.current) return;\n      try {\n        isStreamingRef.current = true;\n        const response = await fetch(`http://localhost:5000/api/stream-book?author=${selectedBook.author}&title=${selectedBook.title}&speed=${200}`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n        while (isStreamingRef.current) {\n          const {\n            done,\n            value\n          } = await reader.read();\n          if (done) break;\n          const paragraph = decoder.decode(value).trim();\n          setMessages(prev => [...prev, {\n            text: paragraph,\n            sender: 'bot',\n            speed: 200\n          }]);\n          setLastParagraphs(prev => [prev[prev.length - 1], paragraph].filter(Boolean));\n          await new Promise(resolve => resolve);\n        }\n        isStreamingRef.current = false;\n      } catch (error) {\n        console.error('Error streaming book:', error);\n        isStreamingRef.current = false;\n      }\n    };\n    if (selectedBook) {\n      fetchBookStream();\n    }\n  }, [selectedBook]);\n  const sendMessageToServer = async message => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          message,\n          chatId,\n          lastParagraphs\n        })\n      });\n      const data = await response.json();\n      return data.reply;\n    } catch (error) {\n      console.error('Error sending message to server:', error);\n      return \"Sorry, I couldn't process your request.\";\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const addMessage = async message => {\n    setIsStreaming(false);\n    setMessages([...messages, {\n      text: message,\n      sender: 'user'\n    }]);\n    const botReply = await sendMessageToServer(message);\n    setMessages(prev => [...prev, {\n      text: botReply,\n      sender: 'bot',\n      speed: 200\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col grow h-dvh mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-y-auto bg-gray-10 p-4\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        text: msg.text,\n        sender: msg.sender\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center\",\n        children: /*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      onSend: addMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"L8//X5YI/L45kwcPR3P9u9c+/b4=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useState","useRef","useEffect","Message","MessageInput","LoadingAnimation","jsxDEV","_jsxDEV","Chat","selectedBook","chatId","_s","messages","setMessages","text","sender","isLoading","setIsLoading","isStreaming","setIsStreaming","lastParagraphs","setLastParagraphs","isStreamingRef","fetchBookStream","current","response","fetch","author","title","method","headers","localStorage","getItem","reader","body","getReader","decoder","TextDecoder","done","value","read","paragraph","decode","trim","prev","speed","length","filter","Boolean","Promise","resolve","error","console","sendMessageToServer","message","JSON","stringify","data","json","reply","addMessage","botReply","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","onSend","_c","$RefreshReg$"],"sources":["/Users/pinarkazak/Repos/Delphi/delphi/src/components/Chat.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react'\nimport Message from './Message'\nimport MessageInput from './MessageInput'\nimport LoadingAnimation from './icons/LoadingAnimation'\n\nconst Chat = ({ selectedBook, chatId }) => {\n  const [messages, setMessages] = useState([{ text: ``, sender: 'bot' }])\n  const [isLoading, setIsLoading] = useState(false)\n  const [isStreaming, setIsStreaming] = useState(false)\n  const [lastParagraphs, setLastParagraphs] = useState([])\n\n  const isStreamingRef = useRef(false)\n\n  useEffect(() => {\n    const fetchBookStream = async () => {\n      if (isStreamingRef.current) return\n  \n      try {\n        isStreamingRef.current = true\n        const response = await fetch(`http://localhost:5000/api/stream-book?author=${selectedBook.author}&title=${selectedBook.title}&speed=${200}`, {\n          method: 'GET',\n          headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\n        })\n  \n        const reader = response.body.getReader()\n        const decoder = new TextDecoder()\n  \n        while (isStreamingRef.current) {\n          const { done, value } = await reader.read()\n          if (done) break\n  \n          const paragraph = decoder.decode(value).trim()\n          setMessages(prev => [...prev, { text: paragraph, sender: 'bot', speed: 200 }])\n          setLastParagraphs(prev => [prev[prev.length - 1], paragraph].filter(Boolean))\n          await new Promise(resolve => resolve)\n        }\n  \n        isStreamingRef.current = false\n      } catch (error) {\n        console.error('Error streaming book:', error)\n        isStreamingRef.current = false\n      }\n    }\n  \n    if (selectedBook) {\n      fetchBookStream()\n    }\n  }, [selectedBook])  \n\n\n  const sendMessageToServer = async (message) => {\n    setIsLoading(true)\n    try {\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({ message, chatId, lastParagraphs })\n      })\n\n      const data = await response.json()\n      return data.reply\n    } catch (error) {\n      console.error('Error sending message to server:', error)\n      return \"Sorry, I couldn't process your request.\"\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const addMessage = async (message) => {\n    setIsStreaming(false)\n    setMessages([...messages, { text: message, sender: 'user' }])\n\n    const botReply = await sendMessageToServer(message)\n    setMessages(prev => [...prev, { text: botReply, sender: 'bot', speed: 200 }])\n  }\n\n  return (\n    <div className=\"flex flex-col grow h-dvh mx-auto\">\n      <div className=\"flex-1 overflow-y-auto bg-gray-10 p-4\">\n        {messages.map((msg, index) => (\n          <Message key={index} text={msg.text} sender={msg.sender} />\n        ))}\n        {isLoading && (\n          <div className=\"flex items-center\">\n            <LoadingAnimation />\n          </div>\n        )}\n      </div>\n      <MessageInput onSend={addMessage} />\n    </div>\n  )\n}\n\nexport default Chat\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}