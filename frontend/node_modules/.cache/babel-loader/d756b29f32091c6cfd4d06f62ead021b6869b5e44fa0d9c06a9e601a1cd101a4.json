{"ast":null,"code":"var _jsxFileName = \"/Users/pinarkazak/Repos/Delphi/delphi/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from 'react';\nimport Message from './Message';\nimport MessageInput from './MessageInput';\nimport LoadingAnimation from './icons/LoadingAnimation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  selectedBook,\n  chatId\n}) => {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: `Hello, I am Delphi. Let's start reading ${selectedBook.title} by ${selectedBook.author}:`,\n    sender: 'bot'\n  }]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isStreaming, setIsStreaming] = useState(false); // Track if we're streaming content\n  const [lastParagraphs, setLastParagraphs] = useState([]); // Last two paragraphs for user interruption context\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const isStreamingRef = useRef(false);\n  useEffect(() => {\n    const fetchBookStream = async () => {\n      if (isStreamingRef.current) return; // Prevent starting a new stream if already streaming\n\n      try {\n        isStreamingRef.current = true;\n        const response = await fetch(`http://localhost:5000/api/stream-book?author=${selectedBook.author}&title=${selectedBook.title}`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n        while (isStreamingRef.current) {\n          const {\n            done,\n            value\n          } = await reader.read();\n          if (done) break;\n          const paragraph = decoder.decode(value).trim();\n          setMessages(prev => [...prev, {\n            text: paragraph,\n            sender: 'bot'\n          }]);\n          setLastParagraphs(prev => [prev[prev.length - 1], paragraph].filter(Boolean));\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n        isStreamingRef.current = false;\n      } catch (error) {\n        console.error('Error streaming book:', error);\n        isStreamingRef.current = false;\n      }\n    };\n    if (selectedBook) {\n      fetchBookStream();\n    }\n  }, [selectedBook]);\n  const sendMessageToServer = async message => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          message,\n          chatId,\n          lastParagraphs\n        })\n      });\n      const data = await response.json();\n      return data.reply;\n    } catch (error) {\n      console.error('Error sending message to server:', error);\n      return \"Sorry, I couldn't process your request.\";\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const addMessage = async message => {\n    setIsStreaming(false); // Stop streaming when user sends a message\n    setMessages([...messages, {\n      text: message,\n      sender: 'user'\n    }]);\n    const botReply = await sendMessageToServer(message);\n    setMessages(prev => [...prev, {\n      text: botReply,\n      sender: 'bot'\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col grow h-dvh mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-y-auto bg-gray-10 p-4\",\n      children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        text: msg.text,\n        sender: msg.sender\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center\",\n        children: /*#__PURE__*/_jsxDEV(LoadingAnimation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      onSend: addMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"sy4MbgUUoFHmSs5s8YUC3k1sGH4=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["useState","useRef","useEffect","Message","MessageInput","LoadingAnimation","jsxDEV","_jsxDEV","Chat","selectedBook","chatId","_s","messages","setMessages","text","title","author","sender","isLoading","setIsLoading","isStreaming","setIsStreaming","lastParagraphs","setLastParagraphs","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","isStreamingRef","fetchBookStream","response","fetch","method","headers","localStorage","getItem","reader","body","getReader","decoder","TextDecoder","done","value","read","paragraph","decode","trim","prev","length","filter","Boolean","Promise","resolve","setTimeout","error","console","sendMessageToServer","message","JSON","stringify","data","json","reply","addMessage","botReply","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSend","_c","$RefreshReg$"],"sources":["/Users/pinarkazak/Repos/Delphi/delphi/src/components/Chat.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react'\nimport Message from './Message'\nimport MessageInput from './MessageInput'\nimport LoadingAnimation from './icons/LoadingAnimation'\n\nconst Chat = ({ selectedBook, chatId }) => {\n  const [messages, setMessages] = useState([{ text: `Hello, I am Delphi. Let's start reading ${selectedBook.title} by ${selectedBook.author}:`, sender: 'bot' }])\n  const [isLoading, setIsLoading] = useState(false)\n  const [isStreaming, setIsStreaming] = useState(false) // Track if we're streaming content\n  const [lastParagraphs, setLastParagraphs] = useState([]) // Last two paragraphs for user interruption context\n  const messagesEndRef = useRef(null)\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [messages])\n\n  const isStreamingRef = useRef(false)\n\n  useEffect(() => {\n    const fetchBookStream = async () => {\n      if (isStreamingRef.current) return // Prevent starting a new stream if already streaming\n  \n      try {\n        isStreamingRef.current = true\n        const response = await fetch(`http://localhost:5000/api/stream-book?author=${selectedBook.author}&title=${selectedBook.title}`, {\n          method: 'GET',\n          headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\n        })\n  \n        const reader = response.body.getReader()\n        const decoder = new TextDecoder()\n  \n        while (isStreamingRef.current) {\n          const { done, value } = await reader.read()\n          if (done) break\n  \n          const paragraph = decoder.decode(value).trim()\n          setMessages(prev => [...prev, { text: paragraph, sender: 'bot' }])\n          setLastParagraphs(prev => [prev[prev.length - 1], paragraph].filter(Boolean))\n          await new Promise(resolve => setTimeout(resolve, 1000))\n        }\n  \n        isStreamingRef.current = false\n      } catch (error) {\n        console.error('Error streaming book:', error)\n        isStreamingRef.current = false\n      }\n    }\n  \n    if (selectedBook) {\n      fetchBookStream()\n    }\n  }, [selectedBook])  \n\n\n  const sendMessageToServer = async (message) => {\n    setIsLoading(true)\n    try {\n      const response = await fetch('http://localhost:5000/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({ message, chatId, lastParagraphs })\n      })\n\n      const data = await response.json()\n      return data.reply\n    } catch (error) {\n      console.error('Error sending message to server:', error)\n      return \"Sorry, I couldn't process your request.\"\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const addMessage = async (message) => {\n    setIsStreaming(false) // Stop streaming when user sends a message\n    setMessages([...messages, { text: message, sender: 'user' }])\n\n    const botReply = await sendMessageToServer(message)\n    setMessages(prev => [...prev, { text: botReply, sender: 'bot' }])\n  }\n\n  return (\n    <div className=\"flex flex-col grow h-dvh mx-auto\">\n      <div className=\"flex-1 overflow-y-auto bg-gray-10 p-4\">\n        {messages.map((msg, index) => (\n          <Message key={index} text={msg.text} sender={msg.sender} />\n        ))}\n        {isLoading && (\n          <div className=\"flex items-center\">\n            <LoadingAnimation />\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n      <MessageInput onSend={addMessage} />\n    </div>\n  )\n}\n\nexport default Chat\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}